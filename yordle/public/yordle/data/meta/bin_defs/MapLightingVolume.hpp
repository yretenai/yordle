/// <auto-generated>
// THIS FILE IS AUTO GENERATED DO NOT EDIT
#ifndef YORDLE_META_DEF_MapLightingVolume
#pragma once

#include <memory>
#include <array>
#include <optional>

#include <yordle/data/meta/bin_defs/MapPlaceable.hpp>
#include <yordle/data/meta/bin_ref.hpp>
#include <yordle/data/prop/structure_prop.hpp>
#include <yordle/yordle_export.h>

namespace yordle::data::meta {
    struct YORDLE_EXPORT MapLightingVolume : public MapPlaceable {
        explicit MapLightingVolume(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2319232567u || MapPlaceable::is_type(type);
        }

        std::array<float, 4> sunColor { 1, 1, 1, 1 };
        float x4620fe14 = 1.0;
        float x196ca4c4 = 10.0;
        std::array<float, 3> sunDirection { 0, 0.707, 0.707 };
        std::optional<std::array<float, 3>> xa04bd9bf {};
        float xd8851203 = 0.0;
        float xba02f116 = 1.0;
        std::array<float, 4> skyLightColor { 0.705, 0.88, 1, 1 };
        std::array<float, 4> horizonColor { 0.4, 0.4, 0.4, 1 };
        std::array<float, 4> groundColor { 0.1, 0.1, 0.1, 1 };
        float skyLightScale = 0.20000000298023224;
        float lightMapColorScale = 1.0;
        bool fogEnabled = true;
        std::array<float, 4> fogColor { 0.2, 0.2, 0.4, 1 };
        std::array<float, 4> fogAlternateColor { 0.1, 0.1, 0.2, 1 };
        std::array<float, 2> fogStartAndEnd { 0, -2000 };
        float fogEmissiveRemap = 1.899999976158142;
        float fogLowQualityModeEmissiveRemap = 0.019999999552965164;
    };
}
#define YORDLE_META_DEF_MapLightingVolume
#endif
