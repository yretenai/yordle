/// <auto-generated>
// THIS FILE IS AUTO GENERATED DO NOT EDIT
#ifndef YORDLE_META_DEF_SpellDataResource
#pragma once

#include <memory>
#include <cstdint>
#include <vector>
#include <string>
#include <array>
#include <map>
#include <optional>

#include <yordle/data/meta/bin_defs/ObjectTags.hpp>
#include <yordle/data/meta/bin_defs/ICastRequirement.hpp>
#include <yordle/data/meta/bin_defs/x7a9e7d89.hpp>
#include <yordle/data/meta/bin_defs/PlatformSpellInfo.hpp>
#include <yordle/data/meta/bin_defs/SpellEffectAmount.hpp>
#include <yordle/data/meta/bin_defs/SpellDataValue.hpp>
#include <yordle/data/meta/bin_defs/SpellDataValueVector.hpp>
#include <yordle/data/meta/bin_defs/IGameCalculation.hpp>
#include <yordle/data/meta/bin_defs/AlternateSpellAssets.hpp>
#include <yordle/data/meta/bin_defs/SpellLockDeltaTimeData.hpp>
#include <yordle/data/meta/bin_defs/SpellPassiveData.hpp>
#include <yordle/data/meta/bin_defs/CharacterPassiveData.hpp>
#include <yordle/data/meta/bin_defs/OverrideAttackTimeData.hpp>
#include <yordle/data/meta/bin_defs/UseAutoattackCastTimeData.hpp>
#include <yordle/data/meta/bin_defs/MissileSpecification.hpp>
#include <yordle/data/meta/bin_defs/AISpellData.hpp>
#include <yordle/data/meta/bin_defs/SpellDataResourceClient.hpp>
#include <yordle/data/meta/bin_defs/TargetingTypeData.hpp>
#include <yordle/data/meta/bin_defs/xefc7f35c.hpp>
#include <yordle/data/meta/bin_class.hpp>
#include <yordle/data/meta/bin_ref.hpp>
#include <yordle/data/prop/structure_prop.hpp>
#include <yordle/yordle_export.h>

namespace yordle::data::meta {
#ifndef YORDLE_META_DEF_ObjectTags
    struct ObjectTags;
#endif

#ifndef YORDLE_META_DEF_ICastRequirement
    struct ICastRequirement;
#endif

#ifndef YORDLE_META_DEF_x7a9e7d89
    struct x7a9e7d89;
#endif

#ifndef YORDLE_META_DEF_PlatformSpellInfo
    struct PlatformSpellInfo;
#endif

#ifndef YORDLE_META_DEF_SpellEffectAmount
    struct SpellEffectAmount;
#endif

#ifndef YORDLE_META_DEF_SpellDataValue
    struct SpellDataValue;
#endif

#ifndef YORDLE_META_DEF_SpellDataValueVector
    struct SpellDataValueVector;
#endif

#ifndef YORDLE_META_DEF_IGameCalculation
    struct IGameCalculation;
#endif

#ifndef YORDLE_META_DEF_AlternateSpellAssets
    struct AlternateSpellAssets;
#endif

#ifndef YORDLE_META_DEF_SpellLockDeltaTimeData
    struct SpellLockDeltaTimeData;
#endif

#ifndef YORDLE_META_DEF_SpellPassiveData
    struct SpellPassiveData;
#endif

#ifndef YORDLE_META_DEF_CharacterPassiveData
    struct CharacterPassiveData;
#endif

#ifndef YORDLE_META_DEF_OverrideAttackTimeData
    struct OverrideAttackTimeData;
#endif

#ifndef YORDLE_META_DEF_UseAutoattackCastTimeData
    struct UseAutoattackCastTimeData;
#endif

#ifndef YORDLE_META_DEF_MissileSpecification
    struct MissileSpecification;
#endif

#ifndef YORDLE_META_DEF_AISpellData
    struct AISpellData;
#endif

#ifndef YORDLE_META_DEF_SpellDataResourceClient
    struct SpellDataResourceClient;
#endif

#ifndef YORDLE_META_DEF_TargetingTypeData
    struct TargetingTypeData;
#endif

#ifndef YORDLE_META_DEF_xefc7f35c
    struct xefc7f35c;
#endif
    struct YORDLE_EXPORT SpellDataResource : public bin_class {
        explicit SpellDataResource(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1127646569u;
        }

        uint32_t flags = 0u;
        uint32_t xb4b840e6 = 0u;
        uint32_t mAffectsTypeFlags = 0u;
        uint32_t mAffectsStatusFlags = 0u;
        std::shared_ptr<yordle::data::meta::ObjectTags> mRequiredUnitTags {};
        std::shared_ptr<yordle::data::meta::ObjectTags> mExcludedUnitTags {};
        std::vector<std::shared_ptr<yordle::data::meta::ICastRequirement>> mCastRequirementsCaster {};
        std::vector<std::shared_ptr<yordle::data::meta::ICastRequirement>> mCastRequirementsTarget {};
        std::vector<std::shared_ptr<yordle::data::meta::x7a9e7d89>> x7a9e7d89 {};
        std::shared_ptr<yordle::data::meta::PlatformSpellInfo> mPlatformSpellInfo {};
        std::string mAlternateName {};
        std::vector<std::string> mSpellTags {};
        std::array<std::shared_ptr<yordle::data::meta::SpellEffectAmount>, 10> mEffectAmount { nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr };
        std::vector<std::shared_ptr<yordle::data::meta::SpellDataValue>> mDataValues {};
        std::map<yordle::data::meta::bin_fnv_hash, std::shared_ptr<yordle::data::meta::SpellDataValueVector>> xfb56608c {};
        std::map<yordle::data::meta::bin_fnv_hash, std::shared_ptr<yordle::data::meta::IGameCalculation>> mSpellCalculations {};
        float mCoefficient = 0.0;
        float mCoefficient2 = 0.0;
        std::vector<std::shared_ptr<yordle::data::meta::AlternateSpellAssets>> mAlternateSpellAssets {};
        std::string mAnimationName = "Attack1";
        std::string mAnimationLoopName {};
        std::string mAnimationWinddownName {};
        std::string mAnimationLeadOutName {};
        std::vector<std::string> mImgIconName {};
        std::string x21753196 {};
        std::string mMinimapIconName {};
        std::string mKeywordWhenAcquired {};
        float mCastTime = 0.0;
        std::array<float, 7> mChannelDuration { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        std::array<float, 7> CooldownTime { 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0 };
        float delayCastOffsetPercent = 0.0;
        float delayTotalTimePercent = 0.0;
        float mPreCastLockoutDeltaTime = 0.0;
        std::shared_ptr<yordle::data::meta::SpellLockDeltaTimeData> mPreCastLockoutDeltaTimeData {};
        float mPostCastLockoutDeltaTime = 0.0;
        std::shared_ptr<yordle::data::meta::SpellLockDeltaTimeData> mPostCastLockoutDeltaTimeData {};
        float mStartCooldown = 0.0;
        std::array<float, 7> mCastRangeGrowthMax { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        std::array<float, 7> mCastRangeGrowthStartTime { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        std::array<float, 7> mCastRangeGrowthDuration { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        float mChargeUpdateInterval = 0.0;
        float mCancelChargeOnRecastTime = 0.0;
        uint8_t x3d746f1f = 0u;
        std::vector<std::shared_ptr<yordle::data::meta::SpellPassiveData>> x1632f6fc {};
        std::vector<std::shared_ptr<yordle::data::meta::CharacterPassiveData>> mCharacterPassiveBuffs {};
        std::array<int32_t, 7> mMaxAmmo { -1, -1, -1, -1, -1, -1, -1 };
        std::array<int32_t, 7> mAmmoUsed { 1, 1, 1, 1, 1, 1, 1 };
        std::array<float, 7> mAmmoRechargeTime { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        bool mIsDelayedByCastLocked = false;
        bool mAmmoNotAffectedByCDR = false;
        bool mCooldownNotAffectedByCDR = false;
        bool mAmmoCountHiddenInUI = false;
        bool mCostAlwaysShownInUI = false;
        bool x9fb86dc4 = false;
        bool cannotBeSuppressed = false;
        bool canCastWhileDisabled = false;
        bool mCanTriggerChargeSpellWhileDisabled = false;
        bool canCastOrQueueWhileCasting = false;
        bool canOnlyCastWhileDisabled = false;
        bool mCantCancelWhileWindingUp = false;
        bool x7e3432a0 = false;
        bool mCantCancelWhileChanneling = false;
        bool cantCastWhileRooted = false;
        bool mChannelIsInterruptedByDisables = true;
        bool mChannelIsInterruptedByAttacking = true;
        bool mApplyAttackDamage = false;
        bool mApplyAttackEffect = false;
        bool mApplyMaterialOnHitSound = false;
        bool mDoesntBreakChannels = false;
        bool mBelongsToAvatar = false;
        bool mIsDisabledWhileDead = true;
        bool canOnlyCastWhileDead = false;
        bool mCursorChangesInGrass = false;
        bool mCursorChangesInTerrain = false;
        bool mProjectTargetToCastRange = false;
        bool mSpellRevealsChampion = true;
        bool mUseMinimapTargeting = false;
        bool castRangeUseBoundingBoxes = false;
        bool mMinimapIconRotation = false;
        bool mUseChargeChanneling = false;
        bool mCanMoveWhileChanneling = false;
        bool mDisableCastBar = false;
        bool mShowChannelBar = true;
        bool alwaysSnapFacing = false;
        bool useAnimatorFramerate = false;
        bool bHaveHitEffect = false;
        bool bHaveHitBone = false;
        bool bIsToggleSpell = false;
        bool mDoNotNeedToFaceTarget = false;
        float mTurnSpeedScalar = 1.0;
        bool mNoWinddownIfCancelled = false;
        bool mIgnoreRangeCheck = false;
        bool mOrientRadiusTextureFromPlayer = false;
        std::shared_ptr<yordle::data::meta::OverrideAttackTimeData> mOverrideAttackTime {};
        std::shared_ptr<yordle::data::meta::UseAutoattackCastTimeData> mUseAutoattackCastTimeData {};
        bool mIgnoreAnimContinueUntilCastFrame = false;
        bool mHideRangeIndicatorWhenCasting = false;
        bool mUpdateRotationWhenCasting = false;
        bool mPingableWhileDisabled = false;
        bool mConsideredAsAutoAttack = false;
        bool mDoesNotConsumeMana = false;
        bool mDoesNotConsumeCooldown = false;
        bool mLockedSpellOriginationCastID = false;
        bool x898fbad4 = false;
        int16_t mMinimapIconDisplayFlag = 1u;
        std::array<float, 7> castRange { 400.0, 400.0, 400.0, 400.0, 400.0, 400.0, 400.0 };
        std::array<float, 7> castRangeDisplayOverride { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        std::array<float, 7> castRadius { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        std::array<float, 7> castRadiusSecondary { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        float castConeAngle = 45.0;
        float castConeDistance = 400.0;
        float castTargetAdditionalUnitsRadius = 0.0;
        float luaOnMissileUpdateDistanceInterval = 0.0;
        std::shared_ptr<yordle::data::meta::MissileSpecification> mMissileSpec {};
        uint32_t mCastType = 0u;
        float castFrame = 0.0;
        float missileSpeed = 500.0;
        yordle::data::meta::bin_fnv_hash mMissileEffectKey = 0u;
        std::string mMissileEffectName {};
        yordle::data::meta::bin_fnv_hash mMissileEffectPlayerKey = 0u;
        std::string mMissileEffectPlayerName {};
        yordle::data::meta::bin_fnv_hash mMissileEffectEnemyKey = 0u;
        std::string mMissileEffectEnemyName {};
        float mLineWidth = 0.0;
        float mLineDragLength = 0.0;
        uint32_t mLookAtPolicy = 2u;
        uint32_t mHitEffectOrientType = 1u;
        std::string mHitBoneName {};
        yordle::data::meta::bin_fnv_hash mHitEffectKey = 0u;
        std::string mHitEffectName {};
        yordle::data::meta::bin_fnv_hash mHitEffectPlayerKey = 0u;
        std::string mHitEffectPlayerName {};
        yordle::data::meta::bin_fnv_hash mAfterEffectKey = 0u;
        std::string mAfterEffectName {};
        std::array<float, 3> mParticleStartOffset { 0, 0, 0 };
        std::array<int32_t, 16> mFloatVarsDecimals { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
        std::array<float, 6> Mana { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        std::array<float, 6> manaUiOverride { -1.0, -1.0, -1.0, -1.0, -1.0, -1.0 };
        uint32_t selectionPriority = 3u;
        std::string mVOEventCategory {};
        std::shared_ptr<yordle::data::meta::AISpellData> mAIData {};
        std::optional<float> mSpellCooldownOrSealedQueueThreshold {};
        uint8_t x3f432a6 = 0u;
        std::shared_ptr<yordle::data::meta::SpellDataResourceClient> mClientData {};
        bool xf7e5bc = false;
        bool x39381720 = false;
        bool xa8eb09d1 = false;
        bool x24b763c2 = false;
        std::shared_ptr<yordle::data::meta::TargetingTypeData> mTargetingTypeData {};
        yordle::data::meta::bin_ref<yordle::data::meta::xefc7f35c> x63060019 { 4022858588 };
        std::vector<yordle::data::meta::bin_fnv_hash> mResourceResolvers {};
        std::vector<std::string> AudioBankPaths {};
    };
}
#define YORDLE_META_DEF_SpellDataResource
#endif
