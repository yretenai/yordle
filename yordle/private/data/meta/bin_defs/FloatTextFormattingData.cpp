/// <auto-generated>
// THIS FILE IS AUTO GENERATED DO NOT EDIT
#include <yordle/data/meta/bin_defs/FloatTextFormattingData.hpp>

#include <yordle/data/meta/bin_defs/GameFontDescription.hpp>
#include <yordle/data/meta/bin_defs/FloatTextIconData.hpp>
#include <yordle/data/meta/bin_class.hpp>
#include <yordle/data/prop/empty_prop.hpp>
#include <yordle/data/prop/inline_structure_prop.hpp>
#include <yordle/data/prop/map_prop.hpp>
#include <yordle/data/prop/optional_prop.hpp>
#include <yordle/data/prop/primitive_array_prop.hpp>
#include <yordle/data/prop/primitive_prop.hpp>
#include <yordle/data/prop/set_prop.hpp>
#include <yordle/data/prop/string_prop.hpp>
#include <yordle/data/prop/unordered_set_prop.hpp>
#include <yordle/data/prop/structure_prop.hpp>

yordle::data::meta::FloatTextFormattingData::FloatTextFormattingData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : yordle::data::meta::bin_class(prop) {
    if(prop == nullptr) {
        return;
    }
    auto ptr_mTypeName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3680924211u);
    if(ptr_mTypeName != nullptr) {
        mTypeName = ptr_mTypeName->value;
    }

    auto ptr_decay = prop->cast_prop<yordle::data::prop::float32_prop>(3541427549u);
    if(ptr_decay != nullptr) {
        decay = ptr_decay->value;
    }

    auto ptr_mFontDescription = prop->cast_prop<yordle::data::prop::reference_prop>(2221319337u);
    if(ptr_mFontDescription != nullptr) {
        mFontDescription = yordle::data::meta::bin_ref<yordle::data::meta::GameFontDescription>(3812866480u, ptr_mFontDescription->value);
    }

    auto ptr_colorOffsetR = prop->cast_prop<yordle::data::prop::int32_prop>(4063022363u);
    if(ptr_colorOffsetR != nullptr) {
        colorOffsetR = ptr_colorOffsetR->value;
    }

    auto ptr_colorOffsetG = prop->cast_prop<yordle::data::prop::int32_prop>(3844913316u);
    if(ptr_colorOffsetG != nullptr) {
        colorOffsetG = ptr_colorOffsetG->value;
    }

    auto ptr_colorOffsetB = prop->cast_prop<yordle::data::prop::int32_prop>(3794580459u);
    if(ptr_colorOffsetB != nullptr) {
        colorOffsetB = ptr_colorOffsetB->value;
    }

    auto ptr_combinableNumberFormat = prop->cast_prop<yordle::data::prop::string_prop>(2444496965u);
    if(ptr_combinableNumberFormat != nullptr) {
        combinableNumberFormat = ptr_combinableNumberFormat->value;
    }

    auto ptr_combinableNegativeNumberFormat = prop->cast_prop<yordle::data::prop::string_prop>(233173502u);
    if(ptr_combinableNegativeNumberFormat != nullptr) {
        combinableNegativeNumberFormat = ptr_combinableNegativeNumberFormat->value;
    }

    auto ptr_priority = prop->cast_prop<yordle::data::prop::int32_prop>(2498028297u);
    if(ptr_priority != nullptr) {
        priority = ptr_priority->value;
    }

    auto ptr_height = prop->cast_prop<yordle::data::prop::float32_prop>(3585981250u);
    if(ptr_height != nullptr) {
        height = ptr_height->value;
    }

    auto ptr_decayDelay = prop->cast_prop<yordle::data::prop::float32_prop>(3417245824u);
    if(ptr_decayDelay != nullptr) {
        decayDelay = ptr_decayDelay->value;
    }

    auto ptr_disabled = prop->cast_prop<yordle::data::prop::bool_prop>(871591685u);
    if(ptr_disabled != nullptr) {
        disabled = ptr_disabled->value;
    }

    auto ptr_isAnimated = prop->cast_prop<yordle::data::prop::bool_prop>(3272805804u);
    if(ptr_isAnimated != nullptr) {
        isAnimated = ptr_isAnimated->value;
    }

    auto ptr_momentumFromHit = prop->cast_prop<yordle::data::prop::bool_prop>(202591156u);
    if(ptr_momentumFromHit != nullptr) {
        momentumFromHit = ptr_momentumFromHit->value;
    }

    auto ptr_followSource = prop->cast_prop<yordle::data::prop::bool_prop>(3615228949u);
    if(ptr_followSource != nullptr) {
        followSource = ptr_followSource->value;
    }

    auto ptr_disableHorizontalReverse = prop->cast_prop<yordle::data::prop::bool_prop>(296058719u);
    if(ptr_disableHorizontalReverse != nullptr) {
        disableHorizontalReverse = ptr_disableHorizontalReverse->value;
    }

    auto ptr_disableVerticalReverse = prop->cast_prop<yordle::data::prop::bool_prop>(3542364389u);
    if(ptr_disableVerticalReverse != nullptr) {
        disableVerticalReverse = ptr_disableVerticalReverse->value;
    }

    auto ptr_combinableCounterDisplay = prop->cast_prop<yordle::data::prop::bool_prop>(1085616689u);
    if(ptr_combinableCounterDisplay != nullptr) {
        combinableCounterDisplay = ptr_combinableCounterDisplay->value;
    }

    auto ptr_overwritePreviousNumber = prop->cast_prop<yordle::data::prop::bool_prop>(1354636454u);
    if(ptr_overwritePreviousNumber != nullptr) {
        overwritePreviousNumber = ptr_overwritePreviousNumber->value;
    }

    auto ptr_combinableCounterCategory = prop->cast_prop<yordle::data::prop::int32_prop>(1105170965u);
    if(ptr_combinableCounterCategory != nullptr) {
        combinableCounterCategory = ptr_combinableCounterCategory->value;
    }

    auto ptr_minXVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(2016356458u);
    if(ptr_minXVelocity != nullptr) {
        minXVelocity = ptr_minXVelocity->value;
    }

    auto ptr_maxXVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(2577084868u);
    if(ptr_maxXVelocity != nullptr) {
        maxXVelocity = ptr_maxXVelocity->value;
    }

    auto ptr_minYVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(871508849u);
    if(ptr_minYVelocity != nullptr) {
        minYVelocity = ptr_minYVelocity->value;
    }

    auto ptr_maxYVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(3339261459u);
    if(ptr_maxYVelocity != nullptr) {
        maxYVelocity = ptr_maxYVelocity->value;
    }

    auto ptr_startOffsetX = prop->cast_prop<yordle::data::prop::float32_prop>(3170333012u);
    if(ptr_startOffsetX != nullptr) {
        startOffsetX = ptr_startOffsetX->value;
    }

    auto ptr_startOffsetY = prop->cast_prop<yordle::data::prop::float32_prop>(3187110631u);
    if(ptr_startOffsetY != nullptr) {
        startOffsetY = ptr_startOffsetY->value;
    }

    auto ptr_hangTime = prop->cast_prop<yordle::data::prop::float32_prop>(2368716048u);
    if(ptr_hangTime != nullptr) {
        hangTime = ptr_hangTime->value;
    }

    auto ptr_randomStartOffsetMinX = prop->cast_prop<yordle::data::prop::float32_prop>(2667645605u);
    if(ptr_randomStartOffsetMinX != nullptr) {
        randomStartOffsetMinX = ptr_randomStartOffsetMinX->value;
    }

    auto ptr_randomStartOffsetMaxX = prop->cast_prop<yordle::data::prop::float32_prop>(744751275u);
    if(ptr_randomStartOffsetMaxX != nullptr) {
        randomStartOffsetMaxX = ptr_randomStartOffsetMaxX->value;
    }

    auto ptr_randomStartOffsetMinY = prop->cast_prop<yordle::data::prop::float32_prop>(2650867986u);
    if(ptr_randomStartOffsetMinY != nullptr) {
        randomStartOffsetMinY = ptr_randomStartOffsetMinY->value;
    }

    auto ptr_randomStartOffsetMaxY = prop->cast_prop<yordle::data::prop::float32_prop>(727973656u);
    if(ptr_randomStartOffsetMaxY != nullptr) {
        randomStartOffsetMaxY = ptr_randomStartOffsetMaxY->value;
    }

    auto ptr_growthYScalar = prop->cast_prop<yordle::data::prop::float32_prop>(1351440085u);
    if(ptr_growthYScalar != nullptr) {
        growthYScalar = ptr_growthYScalar->value;
    }

    auto ptr_growthXScalar = prop->cast_prop<yordle::data::prop::float32_prop>(3578687498u);
    if(ptr_growthXScalar != nullptr) {
        growthXScalar = ptr_growthXScalar->value;
    }

    auto ptr_relativeOffsetMin = prop->cast_prop<yordle::data::prop::float32_prop>(1011761094u);
    if(ptr_relativeOffsetMin != nullptr) {
        relativeOffsetMin = ptr_relativeOffsetMin->value;
    }

    auto ptr_relativeOffsetMax = prop->cast_prop<yordle::data::prop::float32_prop>(1315038164u);
    if(ptr_relativeOffsetMax != nullptr) {
        relativeOffsetMax = ptr_relativeOffsetMax->value;
    }

    auto ptr_continualForceX = prop->cast_prop<yordle::data::prop::float32_prop>(3136461269u);
    if(ptr_continualForceX != nullptr) {
        continualForceX = ptr_continualForceX->value;
    }

    auto ptr_continualForceY = prop->cast_prop<yordle::data::prop::float32_prop>(3119683650u);
    if(ptr_continualForceY != nullptr) {
        continualForceY = ptr_continualForceY->value;
    }

    auto ptr_continualForceXBase = prop->cast_prop<yordle::data::prop::float32_prop>(2127470984u);
    if(ptr_continualForceXBase != nullptr) {
        continualForceXBase = ptr_continualForceXBase->value;
    }

    auto ptr_continualForceYBase = prop->cast_prop<yordle::data::prop::float32_prop>(1848540447u);
    if(ptr_continualForceYBase != nullptr) {
        continualForceYBase = ptr_continualForceYBase->value;
    }

    auto ptr_shrinkTime = prop->cast_prop<yordle::data::prop::float32_prop>(2788916873u);
    if(ptr_shrinkTime != nullptr) {
        shrinkTime = ptr_shrinkTime->value;
    }

    auto ptr_Scale = prop->cast_prop<yordle::data::prop::float32_prop>(2190941297u);
    if(ptr_Scale != nullptr) {
        Scale = ptr_Scale->value;
    }

    auto ptr_extendTimeOnNewDamage = prop->cast_prop<yordle::data::prop::float32_prop>(1459141968u);
    if(ptr_extendTimeOnNewDamage != nullptr) {
        extendTimeOnNewDamage = ptr_extendTimeOnNewDamage->value;
    }

    auto ptr_maxLifeTime = prop->cast_prop<yordle::data::prop::float32_prop>(2637798290u);
    if(ptr_maxLifeTime != nullptr) {
        maxLifeTime = ptr_maxLifeTime->value;
    }

    auto ptr_ignoreQueue = prop->cast_prop<yordle::data::prop::bool_prop>(3901908578u);
    if(ptr_ignoreQueue != nullptr) {
        ignoreQueue = ptr_ignoreQueue->value;
    }

    auto ptr_alternateRightLeft = prop->cast_prop<yordle::data::prop::bool_prop>(3343255752u);
    if(ptr_alternateRightLeft != nullptr) {
        alternateRightLeft = ptr_alternateRightLeft->value;
    }

    auto ptr_ignoreCombineRules = prop->cast_prop<yordle::data::prop::bool_prop>(765471835u);
    if(ptr_ignoreCombineRules != nullptr) {
        ignoreCombineRules = ptr_ignoreCombineRules->value;
    }

    auto ptr_maxInstances = prop->cast_prop<yordle::data::prop::int32_prop>(1406454799u);
    if(ptr_maxInstances != nullptr) {
        maxInstances = ptr_maxInstances->value;
    }

    auto ptr_shrinkScale = prop->cast_prop<yordle::data::prop::float32_prop>(3132959154u);
    if(ptr_shrinkScale != nullptr) {
        shrinkScale = ptr_shrinkScale->value;
    }

    auto ptr_refreshExisting = prop->cast_prop<yordle::data::prop::bool_prop>(1698832793u);
    if(ptr_refreshExisting != nullptr) {
        refreshExisting = ptr_refreshExisting->value;
    }

    auto ptr_attachToHealthBar = prop->cast_prop<yordle::data::prop::bool_prop>(218806424u);
    if(ptr_attachToHealthBar != nullptr) {
        attachToHealthBar = ptr_attachToHealthBar->value;
    }

    auto ptr_offsetByBoundingBox = prop->cast_prop<yordle::data::prop::bool_prop>(1251907752u);
    if(ptr_offsetByBoundingBox != nullptr) {
        offsetByBoundingBox = ptr_offsetByBoundingBox->value;
    }

    auto ptr_horizontalAlignment = prop->cast_prop<yordle::data::prop::uint8_prop>(4102451730u);
    if(ptr_horizontalAlignment != nullptr) {
        horizontalAlignment = ptr_horizontalAlignment->value;
    }

    auto ptr_verticalAlignment = prop->cast_prop<yordle::data::prop::uint8_prop>(310398740u);
    if(ptr_verticalAlignment != nullptr) {
        verticalAlignment = ptr_verticalAlignment->value;
    }

    auto ptr_icons = prop->cast_prop<yordle::data::prop::set_prop>(4192329017u);
    if(ptr_icons != nullptr) {
        for(const auto &set_icons_entry : ptr_icons->value) {
            auto ptr_icons_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(set_icons_entry);
            if(ptr_icons_entry != nullptr) {
                icons.emplace_back(yordle::data::meta::deserialize<yordle::data::meta::FloatTextIconData>(ptr_icons_entry, 383291203u));
            }
        }
    }
}
